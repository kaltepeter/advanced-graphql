enum Status {
  OPEN
  IN_PROGRESS
  REVIEWING
  DONE
}

enum TaskType {
  design
  dev
}

# Right now, this is a type. But there are two Types of Tasks
# DevTask and DesignTask
# Rething making the Task type an interface instead
# and create two new type (DevTask, DesignTask) that implement the
# Task interface
# don't forget to add the correct fields to the correct Type ðŸ’¯
type Task {
  id: ID!
  name: String!
  project: Project!
  status: Status!
  description: String
  tasks: [Task]!
  parentTask: Task
  type: TaskType!
  dueDate: Float
  createdAt: String!
  updatedAt: String!
  # devTask specific field
  repo: Repo!
  # designTask specific task
  assetUrl: String!
}

type Repo {
  name: String!
  issueCount: Int!
  description: String
  url: String!
}

input ChangeStatusInput {
  id: ID!
  status: Status!
}

input TasksInput {
  type: TaskType
  status: Status
  project: ID!
}

input NewTaskInput {
  project: ID!
  name: ID!
  type: TaskType!
  dueDate: Float
  status: Status = OPEN
  description: String
  parentTask: ID
  repoUrl: String
  assetUrl: String
}

input TaskInput {
  project: ID!
  id: ID
  name: String
}

extend type Query {
  task(input: TaskInput!): Task!
  tasks(input: TasksInput!): [Task]!
}

extend type Mutation {
  newTask(input: NewTaskInput!): Task!
  changeStatus(input: ChangeStatusInput!): Task!
  removeTask(id: ID!): Task!
}
